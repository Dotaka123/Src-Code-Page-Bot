const { sendMessage } = require('./sendMessage');
const axios = require('axios');

const handlePostback = async (event, pageAccessToken) => {
  const { id: senderId } = event.sender || {};
  const { payload } = event.postback || {};

  if (!senderId || !payload) {
    return console.error('Invalid postback event object');
  }

  try {
    // VÃ©rifier si le payload est 'GET_STARTED' pour envoyer un message de bienvenue avec des boutons
    if (payload === 'GET_STARTED') {
      const welcomeMessage = `
ğŸ‡«ğŸ‡·: Bienvenue dans l'univers de Girlfriend AI, votre petite amie virtuelle ğŸŒŸ! 
PrÃ©parez-vous Ã  vivre une expÃ©rience unique et amusante avec moi ğŸ¤–ğŸ’•!
      
Envoyez "help" pour voir toutes mes fonctionnalitÃ©s.
      `;

      // Envoyer un message de bienvenue avec des boutons
      await sendMessage(senderId, {
        text: welcomeMessage.trim(),
        quick_replies: [
          {
            content_type: 'text',
            title: 'Mode fille ğŸ’–',
            payload: 'MODE_FILLE'
          },
          {
            content_type: 'text',
            title: 'Mode garÃ§on ğŸ’™',
            payload: 'MODE_GARCON'
          }
        ]
      }, pageAccessToken);

    } else if (payload === 'MODE_FILLE') {
      await sendMessage(senderId, { text: 'Mode fille activÃ© ! ğŸ’• PrÃªte Ã  discuter avec Miora !' }, pageAccessToken);
    } else if (payload === 'MODE_GARCON') {
      await sendMessage(senderId, { text: 'Mode garÃ§on activÃ© ! ğŸ’™ PrÃªt Ã  discuter avec Nario !' }, pageAccessToken);
    } else {
      await sendMessage(senderId, { text: `Vous avez envoyÃ© un postback avec le payload : ${payload}` }, pageAccessToken);
    }
  } catch (err) {
    console.error('Error sending postback response:', err.message || err);
  }
};

module.exports = { handlePostback };
