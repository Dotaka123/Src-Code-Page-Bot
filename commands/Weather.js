const { getWeather } = require("weathers-watch");
const { sendMessage } = require("../handles/sendMessage");
const fs = require("fs");

const token = fs.readFileSync("token.txt", "utf8");

module.exports = {
  name: "weather",
  description: "Obtenez la m√©t√©o actuelle d'un lieu",
  author: "Tata",

  async execute(senderId, args) {
    const pageAccessToken = token;
    const locationQuery = args.join(" ").trim();

    // V√©rifier si l'utilisateur a fourni un lieu
    if (!locationQuery) {
      await sendMessage(
        senderId,
        { text: "üåç Veuillez fournir le nom d'une ville pour obtenir la m√©t√©o (ex: `meteo Paris`)." },
        pageAccessToken
      );
      return;
    }

    try {
      // Appel √† l'API pour obtenir la m√©t√©o
      const weatherResult = await getWeather(locationQuery);

      if (!weatherResult || !weatherResult.currentWeather) {
        await sendMessage(
          senderId,
          { text: `‚ùå D√©sol√©, aucune donn√©e m√©t√©o n'est disponible pour "${locationQuery}".` },
          pageAccessToken
        );
        return;
      }

      // Extraction des informations depuis la r√©ponse de l'API
      const { location, locationDetail, currentWeather, forecastSummary } = weatherResult;

      // Formatage des informations m√©t√©o actuelles
      const currentWeatherInfo = `
üå§Ô∏è **M√©t√©o pour ${location}, ${locationDetail}** üå§Ô∏è
- Temp√©rature : ${currentWeather.temperature}
- Point de ros√©e : ${currentWeather.dewPoint}
- Pression atmosph√©rique : ${currentWeather.barometer}
- Vent : ${currentWeather.wind}
- Humidit√© : ${currentWeather.humidity}
- Derni√®re mise √† jour : ${currentWeather.time}
      `;

      // Formatage du r√©sum√© des pr√©visions
      let forecastInfo = "**Pr√©visions √† venir :**\n";
      forecastSummary.forEach((forecast) => {
        forecastInfo += `\nüìÖ ${forecast.day} (${forecast.date}) : ${forecast.result}, Min: ${forecast.min || "N/A"}, Max: ${forecast.max || "N/A"}`;
      });

      // Envoi du message format√© √† l'utilisateur
      const formattedMessage = `${currentWeatherInfo}\n\n${forecastInfo}`;

      await sendMessage(
        senderId,
        { text: formattedMessage },
        pageAccessToken
      );

    } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration de la m√©t√©o :", error.message);
      await sendMessage(
        senderId,
        { text: "‚ùå Une erreur est survenue lors de la r√©cup√©ration de la m√©t√©o. Veuillez r√©essayer plus tard." },
        pageAccessToken
      );
    }
  },
};
